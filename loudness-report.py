import soundfile as sf
import pyloudnorm as pyln
import os
from pydub import AudioSegment
#import csv
import datetime
#from pprint import pprint
#import numpy as np





def list_wav_files(files):
    wav_files = []
    for file in files:
        extension = file.split(".")
        # print(extension)
        if extension[-1] == "wav":
            wav_files.append(file)
            wav_files.sort()
    return wav_files

# pprint(wav_files)

def lufs_measuring(file, working_path):
    audiofile = os.path.join(working_path, file)
    data, rate = sf.read(audiofile)  # Load audio (with shape (samples, channels))
    meter = pyln.Meter(rate)  # create BS.1770 meter
    loudness = meter.integrated_loudness(data)  # measure loudness
    print(file, "LUFS:", round(loudness, 2))
    return loudness



def main(begintime):
    base_path = os.path.expanduser("~")
    current_path = os.path.dirname(os.path.realpath(__file__))
    print("base_path =", base_path)
    print("current_path =", current_path)
    #userinput = input("Current location? y/n")
    #if userinput == "y":
        #working_path = current_path
    #else:
    working_path = os.path.join(base_path, "Google Drive", "Kuusikoski E-Studio")
    #working_path = os.path.join(base_path, "Google Drive", "Erik Nygard MIDAS 2021", "Finals 2021-12-21", "Master", "Preview")
    # working_path = input("Give path to folder:")
    # working_path = working_path.replace('\\ ', ' ').strip()
    tiedostonimi = os.path.join(working_path, "LUFS.txt")
    #tiedostonimicsv = os.path.join(working_path, "LUFScsv.txt")
    #tiedostocsv = open(tiedostonimicsv, "w", encoding="UTF-8", newline="")
    try:
        tiedosto = open(tiedostonimi, "w")
    except:
        print("Tiedosto error")

    print("Sekected working path is =", working_path)
    tiedosto.write("LUFS report generated by loudness-test.py version 0.3 / Programmed by Daniel Hjerppe" + "\n" + "Using libraries: soundfile, pyloudnorm and pydub" + "\n" + "\n")
    files = os.listdir(working_path)
    # print(files)
    wav_files = list_wav_files(files)
    namelength = 0
    nlname = "N/A"
    for file in wav_files:
        loudness = lufs_measuring(file, working_path)
        sound = AudioSegment.from_file(os.path.join(working_path, file))
        maxPeak = sound.max_dBFS
        framesPerSecond = sound.frame_rate
        bytesPerSample = sound.sample_width
        if bytesPerSample == 1:
            bytesPerSample = 8
        elif bytesPerSample == 2:
            bytesPerSample = 16
        elif bytesPerSample == 3:
            bytesPerSample = 24
        elif bytesPerSample == 4:
            bytesPerSample = 24
        else:
            bytesPerSample = "error"
        print("Max peak =", round(maxPeak, 2), " dBFS")
        print("Sample rate is =", framesPerSecond)
        print("Bit rate is =", bytesPerSample)
        pituus = len(file)
        #print(str(pituus) + " " + file)
        spacing = "\t"# + "\t" + "\t"
        longspacing = " " * (50 - pituus)
        #csvinput = [file, str(round(loudness)), str(round(maxPeak)), str(framesPerSecond), str(bytesPerSample)]
        tiedosto.write(file + longspacing + "LUFS: " + str(round(loudness, 2)) + spacing + "Max Peak: " + str(round(maxPeak, 2)) + spacing + "Samplerate: " + str(framesPerSecond) + spacing + "Bitrate: " + str(bytesPerSample) + "\n")
        if len(file) > namelength:
            namelength = len(file)
            nlname = file
    tiedosto.write("\n"+ "\n" + "This report was automatically generated on: " + str(datetime.datetime.now()))
    tiedosto.write("\n" + "Time taken to generate: " + str(datetime.datetime.now() - begintime))
    tiedosto.close()
    #tiedostocsv.close()
    print("The longest filename was: " + nlname + " at " + str(namelength) + " characters.")
    print(" ")
    print("Time it took to generate this report: " + str(datetime.datetime.now() - begintime))
    print("This report was automatically generated on: " + str(datetime.datetime.now()))


if __name__ == "__main__":
    begintime = datetime.datetime.now()
    main(begintime)



# audiofile = os.path.join(working_path, files[0])
#
# data, rate = sf.read(audiofile) #  Load audio (with shape (samples, channels))
# meter = pyln.Meter(rate) #  create BS.1770 meter
# loudness = meter.integrated_loudness(data) # measure loudness
# # rms = [np.sqrt(np.mean(block**2)) for block in
# #        sf.blocks('Kinaret-country MASTERED.wav', blocksize=1024, overlap=512)]
#
# # print("data:", data)
# # print("meter", meter)
# print("Loudness integrated LUFS?:", round(loudness, 2))
# print("RMS:", rms)

